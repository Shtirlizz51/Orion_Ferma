from PyQt6.QtCore import Qt, QThread
from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QLabel, QLineEdit, QPushButton, QMessageBox,
    QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem, QGroupBox,
    QFormLayout, QSpinBox, QDoubleSpinBox, QComboBox
)

from .styles import STYLESHEET
from .widgets import StatusIndicator, InfoBlock
from infra.telegram_notify import TelegramNotifier
from infra.api_key_manager import APIKeyManager

from core.strategy_engine import StrategyEngine
from exchange.binance_adapter import BinanceAdapter

class ZefirMainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.api_manager = APIKeyManager()
        self.strategy_engine = None
        self._current_mode = "spot"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–∂–∏–º Spot

        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫–Ω–∞
        self.setWindowTitle("ZEFIR Premium Trading Bot ‚òÖ ST-ORION")
        self.resize(1400, 900)
        self.setStyleSheet(STYLESHEET)
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_widget = QWidget()
        self.main_layout = QHBoxLayout(main_widget)
        self.setCentralWidget(main_widget)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        self._create_left_column()
        self._create_right_column()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        self.main_layout.setStretch(0, 2)
        self.main_layout.setStretch(1, 3)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._connect_signals()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        self._update_api_fields_from_manager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
        self._init_trading_engine()

    def _create_left_column(self):
        left_vbox = QVBoxLayout()
        left_vbox.setSpacing(15)

        # --- –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ ---
        title = QLabel('‚ö° ZEFIR TRADING BOT ‚ö°')
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("font-size: 24pt; font-weight: bold; color: #F44336;")
        left_vbox.addWidget(title)

        # --- API ---
        api_group = QGroupBox("API –ö–ª—é—á–∏")
        api_layout = QFormLayout(api_group)
        
        self.api_key_edit = QLineEdit()
        self.api_key_edit.setEchoMode(QLineEdit.EchoMode.Password)
        self.api_secret_edit = QLineEdit()
        self.api_secret_edit.setEchoMode(QLineEdit.EchoMode.Password)
        
        # –ö–Ω–æ–ø–∫–∏ "–ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å"
        self.show_key_btn = QPushButton("üëÅ")
        self.show_key_btn.setCheckable(True)
        self.show_key_btn.setFixedWidth(30)
        self.show_secret_btn = QPushButton("üëÅ")
        self.show_secret_btn.setCheckable(True)
        self.show_secret_btn.setFixedWidth(30)
        
        key_hbox = QHBoxLayout()
        key_hbox.addWidget(self.api_key_edit)
        key_hbox.addWidget(self.show_key_btn)
        
        secret_hbox = QHBoxLayout()
        secret_hbox.addWidget(self.api_secret_edit)
        secret_hbox.addWidget(self.show_secret_btn)

        api_layout.addRow("API Key:", key_hbox)
        api_layout.addRow("API Secret:", secret_hbox)
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        self.mode_combo = QComboBox()
        self.mode_combo.addItems(["–≠–º—É–ª—è—Ü–∏—è", "Testnet Binance", "–†–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç"])
        api_layout.addRow("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", self.mode_combo)
        
        left_vbox.addWidget(api_group)

        # --- –°—Ç–∞—Ç—É—Å—ã ---
        status_group = QGroupBox("–°—Ç–∞—Ç—É—Å—ã")
        status_layout = QFormLayout(status_group)
        
        self.api_status = StatusIndicator()
        self.telegram_status = StatusIndicator()
        
        status_layout.addRow("API:", self.api_status)
        status_layout.addRow("Telegram:", self.telegram_status)
        
        left_vbox.addWidget(status_group)

        # --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
        params_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        params_layout = QFormLayout(params_group)
        
        self.symbol_combo = QComboBox()
        self.symbol_combo.setEditable(True)
        self.symbol_combo.addItems(["BTCUSDT", "ETHUSDT", "SOLUSDT", "ADAUSDT"])
        params_layout.addRow("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞:", self.symbol_combo)
        
        self.deposit_percent = QDoubleSpinBox(suffix=" %", decimals=2, singleStep=1.0, value=100.0, maximum=100.0)
        params_layout.addRow("–î–æ–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞:", self.deposit_percent)
        
        self.dca_count = QSpinBox(value=3, maximum=10)  # –í–ù–ò–ú–ê–ù–ò–ï: —Ç–µ–ø–µ—Ä—å dca_count!
        params_layout.addRow("–ö–æ–ª-–≤–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π:", self.dca_count)
        
        self.dca_step = QDoubleSpinBox(suffix=" %", decimals=2, singleStep=0.1, value=2.8)
        params_layout.addRow("–®–∞–≥ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π:", self.dca_step)
        
        self.martingale_coef = QDoubleSpinBox(decimals=2, singleStep=0.1, value=1.25)
        params_layout.addRow("–ö–æ—ç—Ñ. –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª–∞:", self.martingale_coef)
        
        self.tp_fields = []
        for i in range(1, 4):
            tp_perc = QDoubleSpinBox(suffix=" %", decimals=2, singleStep=0.1, value=1.9 + (i-1)*1.5)
            tp_vol = QDoubleSpinBox(suffix=" %", decimals=0, singleStep=1.0, value=33.0, maximum=100.0)
            params_layout.addRow(f"TP{i} %:", tp_perc)
            params_layout.addRow(f"TP{i} –û–±—ä—ë–º:", tp_vol)
            self.tp_fields.append((tp_perc, tp_vol))
            
        left_vbox.addWidget(params_group)
        left_vbox.addStretch()
        self.main_layout.addLayout(left_vbox)

    def _create_right_column(self):
        right_vbox = QVBoxLayout()
        right_vbox.setSpacing(15)

        # --- –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫ ---
        orders_group = QGroupBox("–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏")
        orders_layout = QVBoxLayout(orders_group)
        
        self.orders_table = QTableWidget(0, 5)
        self.orders_table.setHorizontalHeaderLabels(["–¢–∏–ø", "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", "–û–±—ä—ë–º", "–°—É–º–º–∞", "PnL"])
        self.orders_table.setMinimumHeight(200)
        orders_layout.addWidget(self.orders_table)
        
        right_vbox.addWidget(orders_group, 1)

        # --- –ë–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
        self.info_block = InfoBlock()
        right_vbox.addWidget(self.info_block)

        # --- –ë–ª–æ–∫ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
        btn_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        btns_layout = QVBoxLayout(btn_group)
        
        self.start_btn = QPushButton("–°—Ç–∞—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        self.start_btn.setObjectName("success")
        
        self.soft_stop_btn = QPushButton("–ú—è–≥–∫–∏–π —Å—Ç–æ–ø")
        self.soft_stop_btn.setCheckable(True)
        
        self.hard_stop_btn = QPushButton("–°—Ç–æ–ø")
        self.hard_stop_btn.setObjectName("danger")
        
        self.check_api_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API")
        self.save_strategy_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        self.check_tg_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Telegram")
        
        self.clear_orders_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä–∞")
        self.clear_orders_btn.setObjectName("danger")
        
        self.all_to_usdt_btn = QPushButton("–í—Å—ë –æ–±–º–µ–Ω—è—Ç—å –≤ USDT")
        self.usdt_to_asset_btn = QPushButton("–í—Å—ë –∏–∑ USDT –≤ –∞–∫—Ç–∏–≤")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ layout
        control_buttons = [
            self.start_btn, 
            self.soft_stop_btn, 
            self.hard_stop_btn,
            self.check_api_btn, 
            self.save_strategy_btn, 
            self.check_tg_btn,
            self.clear_orders_btn, 
            self.all_to_usdt_btn, 
            self.usdt_to_asset_btn
        ]
        
        for btn in control_buttons:
            btn.setMinimumHeight(35)
            btns_layout.addWidget(btn)
            
        right_vbox.addWidget(btn_group)
        right_vbox.addStretch()
        self.main_layout.addLayout(right_vbox)

    def _connect_signals(self):
        # –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å API –∫–ª—é—á–∏
        self.show_key_btn.toggled.connect(
            lambda c: self.api_key_edit.setEchoMode(
                QLineEdit.EchoMode.Normal if c else QLineEdit.EchoMode.Password
            )
        )
        self.show_secret_btn.toggled.connect(
            lambda c: self.api_secret_edit.setEchoMode(
                QLineEdit.EchoMode.Normal if c else QLineEdit.EchoMode.Password
            )
        )
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        self.mode_combo.currentIndexChanged.connect(self._update_api_fields_from_manager)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        self.api_key_edit.textChanged.connect(self._save_api_keys_from_fields)
        self.api_secret_edit.textChanged.connect(self._save_api_keys_from_fields)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        self.check_api_btn.clicked.connect(self.check_api_connection)
        self.check_tg_btn.clicked.connect(self.check_telegram_connection)
        self.start_btn.clicked.connect(self.start_strategy)
        self.soft_stop_btn.toggled.connect(self.toggle_soft_stop)
        self.hard_stop_btn.clicked.connect(self.hard_stop_strategy)
        self.save_strategy_btn.clicked.connect(self.save_strategy_settings)
        self.clear_orders_btn.clicked.connect(self.cancel_all_orders)
        self.all_to_usdt_btn.clicked.connect(self.convert_all_to_usdt)
        self.usdt_to_asset_btn.clicked.connect(self.convert_usdt_to_asset)

    def _get_current_mode(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞"""
        idx = self.mode_combo.currentIndex()
        if idx == 0:  # –≠–º—É–ª—è—Ü–∏—è
            return "emulation"
        elif idx == 1:  # Testnet Binance
            return "testnet"
        else:  # –†–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
            return "spot"

    def _update_api_fields_from_manager(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π API –∫–ª—é—á–µ–π –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        mode = self._get_current_mode()
        self._current_mode = mode
        keys = self.api_manager.get_keys(mode)
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.api_key_edit.blockSignals(True)
        self.api_secret_edit.blockSignals(True)
        
        self.api_key_edit.setText(keys.get("api_key", ""))
        self.api_secret_edit.setText(keys.get("api_secret", ""))
        
        self.api_key_edit.blockSignals(False)
        self.api_secret_edit.blockSignals(False)
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        self._init_trading_engine()

    def _save_api_keys_from_fields(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä"""
        mode = self._get_current_mode()
        api_key = self.api_key_edit.text()
        api_secret = self.api_secret_edit.text()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–µ–π
        if not api_key.strip() or not api_secret.strip():
            return
            
        self.api_manager.save_keys(mode, api_key, api_secret)
        self.statusBar().showMessage(f"–ö–ª—é—á–∏ –¥–ª—è {mode.upper()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", 2000)
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª—é—á–µ–π
        self._init_trading_engine()

    def _init_trading_engine(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
        try:
            mode = self._get_current_mode()
            keys = self.api_manager.get_keys(mode)
            api_key = keys.get("api_key", "")
            api_secret = keys.get("api_secret", "")

            if mode == "emulation":
                exchange_adapter = BinanceAdapter(mode="EMULATION")
                self.strategy_engine = StrategyEngine(exchange_adapter)
                self.statusBar().showMessage("–†–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", 3000)
                return

            if not api_key or not api_secret:
                self.strategy_engine = None
                return

            exchange_adapter = BinanceAdapter(
                mode="TESTNET" if mode == "testnet" else "PRODUCTION",
                api_key=api_key,
                api_secret=api_secret
            )

            self.strategy_engine = StrategyEngine(exchange_adapter)
            self.statusBar().showMessage("–¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", 3000)

        except Exception as e:
            self.strategy_engine = None
            self.statusBar().showMessage(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}", 5000)

    def check_api_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –±–∏—Ä–∂–∏"""
        mode = self._get_current_mode()
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —ç–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if mode == "emulation":
            self.api_status.set_state("ok")
            QMessageBox.information(
                self, 
                "–≠–º—É–ª—è—Ü–∏—è", 
                "–†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∏—Ä–∂–µ–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
            )
            return
            
        keys = self.api_manager.get_keys(mode)
        api_key = keys.get("api_key", "")
        api_secret = keys.get("api_secret", "")
        
        if not api_key or not api_secret:
            self.api_status.set_state("error")
            QMessageBox.warning(
                self, 
                "–û—à–∏–±–∫–∞", 
                "API –∫–ª—é—á –∏/–∏–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ –≤–≤–µ–¥–µ–Ω—ã"
            )
            return
            
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            exchange_adapter = BinanceAdapter(
                mode="TESTNET" if mode == "testnet" else "PRODUCTION",
                api_key=api_key,
                api_secret=api_secret
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            exchange_adapter.check_connection()
            
            self.api_status.set_state("ok")
            QMessageBox.information(
                self, 
                "–£—Å–ø–µ—Ö", 
                f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Binance ({mode.upper()}) —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
            )
            
        except Exception as e:
            self.api_status.set_state("error")
            QMessageBox.critical(
                self, 
                "–û—à–∏–±–∫–∞", 
                f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}"
            )

    def check_telegram_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
            TEST_TOKEN = "7332902074:AAGC4KyEVDDt3EK-s9VsM9DwimlSmU-ur9w"
            TEST_CHAT_ID = 7152662300
            
            self.telegram_status.set_state("warning")
            
            notifier = TelegramNotifier(TEST_TOKEN, TEST_CHAT_ID)
            success = notifier.send("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ZEFIR Trading Bot")
            
            if success:
                self.telegram_status.set_state("ok")
                QMessageBox.information(
                    self, 
                    "–£—Å–ø–µ—Ö", 
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!"
                )
            else:
                self.telegram_status.set_state("error")
                QMessageBox.warning(
                    self, 
                    "–û—à–∏–±–∫–∞", 
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"
                )
                
        except Exception as e:
            self.telegram_status.set_state("error")
            QMessageBox.critical(
                self, 
                "–û—à–∏–±–∫–∞", 
                f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}"
            )

    def start_strategy(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if not self.strategy_engine:
            self.statusBar().showMessage("–¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", 3000)
            return
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        settings = self._get_strategy_settings()
        
        try:
            # –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            self.strategy_engine.start_cycle(
                symbol=settings["symbol"],
                settings=settings
            )
            
            self.statusBar().showMessage("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞", 3000)
            self.start_btn.setEnabled(False)
            
        except Exception as e:
            self.statusBar().showMessage(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}", 5000)

    def toggle_soft_stop(self, checked):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –º—è–≥–∫–æ–≥–æ —Å—Ç–æ–ø–∞"""
        if self.strategy_engine:
            self.strategy_engine.set_soft_stop(checked)
        
        # –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
        if checked:
            self.soft_stop_btn.setStyleSheet("""
                background-color: #4CAF50;
                color: white;
                font-weight: bold;
            """)
            self.statusBar().showMessage("–ú—è–≥–∫–∏–π —Å—Ç–æ–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", 3000)
        else:
            self.soft_stop_btn.setStyleSheet("")
            self.statusBar().showMessage("–ú—è–≥–∫–∏–π —Å—Ç–æ–ø –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", 3000)

    def hard_stop_strategy(self):
        """–ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if self.strategy_engine:
            self.strategy_engine.hard_stop()
            self.start_btn.setEnabled(True)
            self.statusBar().showMessage("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", 3000)

    def save_strategy_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        settings = self._get_strategy_settings()
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª –∏–ª–∏ –ë–î
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.statusBar().showMessage("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", 3000)

    def cancel_all_orders(self):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        if self.strategy_engine:
            try:
                self.strategy_engine.cancel_all_orders()
                self.statusBar().showMessage("–í—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã", 3000)
            except Exception as e:
                self.statusBar().showMessage(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}", 5000)

    def convert_all_to_usdt(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤ –≤ USDT"""
        if self.strategy_engine:
            try:
                self.strategy_engine.convert_all_to_usdt()
                self.statusBar().showMessage("–í—Å–µ –∞–∫—Ç–∏–≤—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ USDT", 3000)
            except Exception as e:
                self.statusBar().showMessage(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}", 5000)

    def convert_usdt_to_asset(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USDT –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ç–∏–≤"""
        if self.strategy_engine:
            try:
                symbol = self.symbol_combo.currentText()
                asset = symbol.replace("USDT", "")  # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤
                
                self.strategy_engine.convert_usdt_to_asset(asset)
                self.statusBar().showMessage(f"USDT –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {asset}", 3000)
            except Exception as e:
                self.statusBar().showMessage(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}", 5000)

    def _get_strategy_settings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        return {
            "symbol": self.symbol_combo.currentText(),
            "deposit_percent": self.deposit_percent.value(),
            "dca_count": self.dca_count.value(),      # <--- –¢–æ–ª—å–∫–æ dca_count!
            "dca_step_percent": self.dca_step.value(), # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è order_manager.py
            "martingale_coef": self.martingale_coef.value(),
            "tp1_percent": self.tp_fields[0][0].value(),
            "tp1_volume": self.tp_fields[0][1].value(),
            "tp2_percent": self.tp_fields[1][0].value(),
            "tp2_volume": self.tp_fields[1][1].value(),
            "tp3_percent": self.tp_fields[2][0].value(),
            "tp3_volume": self.tp_fields[2][1].value(),
        }